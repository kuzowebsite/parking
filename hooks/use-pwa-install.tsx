"use client"

import { useState, useEffect } from "react"

interface BeforeInstallPromptEvent extends Event {
  readonly platforms: string[]
  readonly userChoice: Promise<{
    outcome: "accepted" | "dismissed"
    platform: string
  }>
  prompt(): Promise<void>
}

export function usePWAInstall() {
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null)
  const [isInstallable, setIsInstallable] = useState(false)
  const [isInstalled, setIsInstalled] = useState(false)
  const [debugInfo, setDebugInfo] = useState("")

  useEffect(() => {
    console.log("üîß PWA Install Hook initialized")

    // Register service worker
    if ("serviceWorker" in navigator) {
      navigator.serviceWorker
        .register("/sw.js")
        .then((registration) => {
          console.log("‚úÖ Service Worker registered:", registration)
          setDebugInfo("Service Worker –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç")
        })
        .catch((error) => {
          console.log("‚ùå Service Worker registration failed:", error)
          setDebugInfo("Service Worker –∞–ª–¥–∞–∞: " + error.message)
        })
    } else {
      console.log("‚ùå Service Worker not supported")
      setDebugInfo("Service Worker –¥—ç–º–∂–∏–≥–¥—ç—Ö–≥“Ø–π")
    }

    // Check if app is already installed
    const checkIfInstalled = () => {
      const isStandalone = window.matchMedia("(display-mode: standalone)").matches
      const isIOSStandalone = (window.navigator as any).standalone === true

      console.log("üì± Install check:", { isStandalone, isIOSStandalone })

      if (isStandalone || isIOSStandalone) {
        setIsInstalled(true)
        setDebugInfo("–ê–ø–ø–ª–∏–∫–µ—à–Ω –∞–ª—å —Ö—ç–¥–∏–π–Ω —Å—É—É–ª–≥–∞–≥–¥—Å–∞–Ω")
        return true
      }
      return false
    }

    if (checkIfInstalled()) {
      return
    }

    // Force show install button for testing
    setTimeout(() => {
      if (!deferredPrompt) {
        console.log("üîÑ No prompt yet, enabling install anyway")
        setIsInstallable(true)
        setDebugInfo("–°—É—É–ª–≥–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π (forced)")
      }
    }, 2000)

    const handleBeforeInstallPrompt = (e: Event) => {
      console.log("üéØ beforeinstallprompt event fired")
      e.preventDefault()
      setDeferredPrompt(e as BeforeInstallPromptEvent)
      setIsInstallable(true)
      setDebugInfo("Install prompt –±—ç–ª—ç–Ω")
    }

    const handleAppInstalled = () => {
      console.log("‚úÖ App installed")
      setIsInstalled(true)
      setIsInstallable(false)
      setDeferredPrompt(null)
      setDebugInfo("–ê–º–∂–∏–ª—Ç—Ç–∞–π —Å—É—É–ª–≥–∞–≥–¥–ª–∞–∞")
    }

    window.addEventListener("beforeinstallprompt", handleBeforeInstallPrompt)
    window.addEventListener("appinstalled", handleAppInstalled)

    return () => {
      window.removeEventListener("beforeinstallprompt", handleBeforeInstallPrompt)
      window.removeEventListener("appinstalled", handleAppInstalled)
    }
  }, [])

  const installApp = async () => {
    console.log("üöÄ Install button clicked")
    console.log("üìä State:", { deferredPrompt: !!deferredPrompt, isInstallable, isInstalled })

    if (deferredPrompt) {
      try {
        console.log("üì± Showing install prompt")
        await deferredPrompt.prompt()
        const { outcome } = await deferredPrompt.userChoice
        console.log("üë§ User choice:", outcome)

        setDeferredPrompt(null)
        setIsInstallable(false)

        if (outcome === "accepted") {
          setIsInstalled(true)
          setDebugInfo("–•—ç—Ä—ç–≥–ª—ç–≥—á –∑”©–≤—à”©”©—Ä–ª”©”©")
        } else {
          setDebugInfo("–•—ç—Ä—ç–≥–ª—ç–≥—á —Ç–∞—Ç–≥–∞–ª–∑–ª–∞–∞")
        }

        return outcome === "accepted"
      } catch (error) {
        console.error("‚ùå Installation failed:", error)
        setDebugInfo("–°—É—É–ª–≥–∞—Ö–∞–¥ –∞–ª–¥–∞–∞: " + (error as Error).message)
        return false
      }
    } else {
      // Manual instructions for browsers without prompt
      console.log("üìñ Showing manual instructions")
      const userAgent = navigator.userAgent
      let instructions = ""

      if (userAgent.includes("Chrome")) {
        instructions = "Chrome: –•–∞—è–≥–∏–π–Ω –º”©—Ä”©–Ω–¥ —Å—É—É–ª–≥–∞—Ö icon —ç—Å–≤—ç–ª Menu (‚ãÆ) > 'Install app'"
      } else if (userAgent.includes("Firefox")) {
        instructions = "Firefox: Menu (‚ò∞) > 'Install' —ç—Å–≤—ç–ª 'Add to Home Screen'"
      } else if (userAgent.includes("Safari")) {
        instructions = "Safari: Share button (‚éã) > 'Add to Home Screen' (‚ûï)"
      } else {
        instructions = "Browser menu-—Å 'Install' —ç—Å–≤—ç–ª 'Add to Home Screen' —Ö–∞–π–Ω–∞ —É—É"
      }

      alert(`–°—É—É–ª–≥–∞—Ö—ã–Ω —Ç—É–ª–¥:\n\n${instructions}`)
      setDebugInfo("–ì–∞—Ä–∞–∞—Ä —Å—É—É–ª–≥–∞—Ö –∑–∞–∞–≤–∞—Ä “Ø–∑“Ø“Ø–ª–ª—ç—ç")
      return false
    }
  }

  return {
    isInstallable: true, // –ó–∞–∞–≤–∞–ª —Ö–∞—Ä—É—É–ª–∞—Ö
    isInstalled,
    installApp,
    canInstall: !isInstalled, // –°—É—É–ª–≥–∞–≥–¥–∞–∞–≥“Ø–π –±–æ–ª —Ö–∞—Ä—É—É–ª–∞—Ö
    debugInfo,
    hasDeferredPrompt: !!deferredPrompt,
  }
}
