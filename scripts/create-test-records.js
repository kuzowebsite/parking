// –¢–µ—Å—Ç ”©–≥”©–≥–¥”©–ª “Ø“Ø—Å–≥—ç—Ö script
import { initializeApp } from "firebase/app"
import { getDatabase, ref, push } from "firebase/database"

const firebaseConfig = {
  apiKey: "AIzaSyDReM6qjmJb7EZCDoIoR5j1HsVLmiCRD9s",
  authDomain: "ajlitannurtgl.firebaseapp.com",
  databaseURL: "https://ajlitannurtgl-default-rtdb.firebaseio.com",
  projectId: "ajlitannurtgl",
  messagingSenderId: "1061708931334",
  appId: "1:1061708931334:web:661148d945845e1d7f3e87",
  measurementId: "G-ZRDQBCVXVF",
}

const app = initializeApp(firebaseConfig)
const database = getDatabase(app)

async function createTestRecords() {
  try {
    console.log("–¢–µ—Å—Ç ”©–≥”©–≥–¥”©–ª “Ø“Ø—Å–≥—ç–∂ –±–∞–π–Ω–∞...")

    // –¢–µ—Å—Ç –±“Ø—Ä—Ç–≥—ç–ª“Ø“Ø–¥
    const testRecords = [
      {
        carNumber: "1234 –£–ù–ú",
        driverName: "–°–∏—Å—Ç–µ–º –ê–¥–º–∏–Ω",
        parkingArea: "A",
        entryTime: new Date(Date.now() - 2 * 60 * 60 * 1000).toLocaleString("mn-MN"),
        amount: 0,
        type: "entry",
        timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
      },
      {
        carNumber: "1234 –£–ù–ú",
        driverName: "–°–∏—Å—Ç–µ–º –ê–¥–º–∏–Ω",
        parkingArea: "A",
        exitTime: new Date(Date.now() - 1 * 60 * 60 * 1000).toLocaleString("mn-MN"),
        amount: 5000,
        type: "exit",
        timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000).toISOString(),
      },
      {
        carNumber: "5678 –ú–ù–ì",
        driverName: "–°–∏—Å—Ç–µ–º –ê–¥–º–∏–Ω",
        parkingArea: "B",
        entryTime: new Date(Date.now() - 30 * 60 * 1000).toLocaleString("mn-MN"),
        amount: 0,
        type: "entry",
        timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
      },
      {
        carNumber: "9999 –¢–ï–°",
        driverName: "–°–∏—Å—Ç–µ–º –ê–¥–º–∏–Ω",
        parkingArea: "C",
        entryTime: new Date(Date.now() - 10 * 60 * 1000).toLocaleString("mn-MN"),
        amount: 0,
        type: "entry",
        timestamp: new Date(Date.now() - 10 * 60 * 1000).toISOString(),
      },
      {
        carNumber: "9999 –¢–ï–°",
        driverName: "–°–∏—Å—Ç–µ–º –ê–¥–º–∏–Ω",
        parkingArea: "C",
        exitTime: new Date().toLocaleString("mn-MN"),
        amount: 5000,
        type: "exit",
        timestamp: new Date().toISOString(),
      },
    ]

    // –ë“Ø—Ä—Ç–≥—ç–ª“Ø“Ø–¥–∏–π–≥ database-–¥ —Ö–∞–¥–≥–∞–ª–∞—Ö
    for (const record of testRecords) {
      await push(ref(database, "parking_records"), record)
      console.log(`‚úÖ –ë“Ø—Ä—Ç–≥—ç–ª –Ω—ç–º—ç–≥–¥–ª—ç—ç: ${record.carNumber} - ${record.type}`)
    }

    console.log("üéâ –ë“Ø—Ö —Ç–µ—Å—Ç ”©–≥”©–≥–¥”©–ª –∞–º–∂–∏–ª—Ç—Ç–∞–π “Ø“Ø—Å–≥—ç–≥–¥–ª—ç—ç!")
    console.log("–û–¥–æ–æ –∞–ø–ø–ª–∏–∫–µ–π—à–Ω–¥ –Ω—ç–≤—Ç—ç—Ä—á '–°“Ø“Ø–ª–∏–π–Ω –±“Ø—Ä—Ç–≥—ç–ª' –±–æ–ª–æ–Ω '–¢“Ø“Ø—Ö' —Ö—ç—Å–≥–∏–π–≥ —à–∞–ª–≥–∞–Ω–∞ —É—É.")
  } catch (error) {
    console.error("‚ùå –ê–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error)
  }
}

// Script –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
createTestRecords()
