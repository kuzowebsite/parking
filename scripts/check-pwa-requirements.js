const fs = require("fs")
const path = require("path")

function checkPWARequirements() {
  console.log("üîç PWA —à–∞–∞—Ä–¥–ª–∞–≥—É—É–¥—ã–≥ —à–∞–ª–≥–∞–∂ –±–∞–π–Ω–∞...")

  const checks = []

  // 1. Manifest —Ñ–∞–π–ª —à–∞–ª–≥–∞—Ö
  const manifestPath = path.join(process.cwd(), "public", "manifest.json")
  if (fs.existsSync(manifestPath)) {
    try {
      const manifest = JSON.parse(fs.readFileSync(manifestPath, "utf8"))
      checks.push({
        name: "Manifest —Ñ–∞–π–ª",
        status: "‚úÖ",
        details: `–ù—ç—Ä: ${manifest.name}, Icons: ${manifest.icons?.length || 0}`,
      })

      // Manifest –¥–æ—Ç–æ—Ä—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π —Ç–∞–ª–±–∞—Ä—É—É–¥ —à–∞–ª–≥–∞—Ö
      const requiredFields = ["name", "short_name", "start_url", "display", "icons"]
      const missingFields = requiredFields.filter((field) => !manifest[field])

      if (missingFields.length > 0) {
        checks.push({
          name: "Manifest —Ç–∞–ª–±–∞—Ä—É—É–¥",
          status: "‚ö†Ô∏è",
          details: `–î—É—Ç—É—É —Ç–∞–ª–±–∞—Ä—É—É–¥: ${missingFields.join(", ")}`,
        })
      } else {
        checks.push({
          name: "Manifest —Ç–∞–ª–±–∞—Ä—É—É–¥",
          status: "‚úÖ",
          details: "–ë“Ø—Ö —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π —Ç–∞–ª–±–∞—Ä—É—É–¥ –±–∞–π–Ω–∞",
        })
      }

      // Icons —à–∞–ª–≥–∞—Ö
      if (manifest.icons && manifest.icons.length > 0) {
        const hasRequiredSizes =
          manifest.icons.some((icon) => icon.sizes === "192x192") &&
          manifest.icons.some((icon) => icon.sizes === "512x512")

        checks.push({
          name: "Icon —Ö—ç–º–∂—ç—ç–Ω“Ø“Ø–¥",
          status: hasRequiredSizes ? "‚úÖ" : "‚ö†Ô∏è",
          details: hasRequiredSizes ? "192x192 –±–æ–ª–æ–Ω 512x512 –±–∞–π–Ω–∞" : "192x192 —ç—Å–≤—ç–ª 512x512 –¥—É—Ç—É—É",
        })
      }
    } catch (error) {
      checks.push({
        name: "Manifest —Ñ–∞–π–ª",
        status: "‚ùå",
        details: `JSON –∞–ª–¥–∞–∞: ${error.message}`,
      })
    }
  } else {
    checks.push({
      name: "Manifest —Ñ–∞–π–ª",
      status: "‚ùå",
      details: "public/manifest.json —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
    })
  }

  // 2. Service Worker —à–∞–ª–≥–∞—Ö
  const swPath = path.join(process.cwd(), "public", "sw.js")
  if (fs.existsSync(swPath)) {
    checks.push({
      name: "Service Worker",
      status: "‚úÖ",
      details: "public/sw.js —Ñ–∞–π–ª –±–∞–π–Ω–∞",
    })
  } else {
    checks.push({
      name: "Service Worker",
      status: "‚ùå",
      details: "public/sw.js —Ñ–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
    })
  }

  // 3. HTTPS —à–∞–ª–≥–∞—Ö (production –¥—ç—ç—Ä)
  checks.push({
    name: "HTTPS",
    status: "‚ÑπÔ∏è",
    details: "Production –¥—ç—ç—Ä HTTPS —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π",
  })

  // 4. Icons —Ñ–∞–π–ª—É—É–¥ —à–∞–ª–≥–∞—Ö
  const iconPaths = ["/images/logo.png"]
  iconPaths.forEach((iconPath) => {
    const fullPath = path.join(process.cwd(), "public", iconPath.substring(1))
    if (fs.existsSync(fullPath)) {
      checks.push({
        name: `Icon —Ñ–∞–π–ª ${iconPath}`,
        status: "‚úÖ",
        details: "–§–∞–π–ª –±–∞–π–Ω–∞",
      })
    } else {
      checks.push({
        name: `Icon —Ñ–∞–π–ª ${iconPath}`,
        status: "‚ö†Ô∏è",
        details: "–§–∞–π–ª –æ–ª–¥—Å–æ–Ω–≥“Ø–π",
      })
    }
  })

  // “Æ—Ä –¥“Ø–Ω —Ö—ç–≤–ª—ç—Ö
  console.log("\nüìã PWA —à–∞–∞—Ä–¥–ª–∞–≥—ã–Ω —Ç–∞–π–ª–∞–Ω:")
  console.log("=" * 50)

  checks.forEach((check) => {
    console.log(`${check.status} ${check.name}: ${check.details}`)
  })

  const passedChecks = checks.filter((c) => c.status === "‚úÖ").length
  const totalChecks = checks.filter((c) => c.status !== "‚ÑπÔ∏è").length

  console.log("\nüìä –ù–∏–π—Ç “Ø–Ω—ç–ª–≥—ç—ç:")
  console.log(`‚úÖ –ê–º–∂–∏–ª—Ç—Ç–∞–π: ${passedChecks}/${totalChecks}`)

  if (passedChecks === totalChecks) {
    console.log("üéâ PWA —Å—É—É–ª–≥–∞—Ö–∞–¥ –±—ç–ª—ç–Ω!")
  } else {
    console.log("‚ö†Ô∏è  PWA —Å—É—É–ª–≥–∞—Ö—ã–Ω —Ç—É–ª–¥ –¥—ç—ç—Ä—Ö –∞—Å—É—É–¥–ª—É—É–¥—ã–≥ –∑–∞—Å–≤–∞—Ä–ª–∞–Ω–∞ —É—É")
  }
}

// Script –∞–∂–∏–ª–ª—É—É–ª–∞—Ö
if (require.main === module) {
  checkPWARequirements()
}

module.exports = checkPWARequirements
